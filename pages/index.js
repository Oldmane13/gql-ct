import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import { getApiRoot, projectKey, GET_PRODUCTS, useGetProducts } from "./api";
import React, { useState, useEffect } from "react";
import { GraphQLClient, gql } from "graphql-request";

const Home = () => {
  const [key, setKey] = useState();
  const [dataForm, setDataForm] = useState({
    name: "",
  });
  const [productData, setProductData] = useState({
    productName: "",
    productDescription: "",
    productSku: "",
    isOnStock: "",
    availableQuantity: "",
    colourFamily: "",
    exactColour: "",
  });

  const {
    productName,
    productDescription,
    productSku,
    isOnStock,
    availableQuantity,
    colourFamily,
    exactColour,
  } = productData;

  const { name } = dataForm;

  const handleChange = (e) => {
    setDataForm({ ...dataForm, [e.target.name]: e.target.value });
    setKey(name);
  };

  const handleSearch = () => {
    setProductData({
      productName: data.product.masterData.staged.name,
      productDescription: data.product.masterData.staged.description,
      productSku: data.product.masterData.staged.masterVariant.sku,
      isOnStock:
        data.product.masterData.staged.masterVariant.availability.channels
          .results[0].availability.isOnStock,
      colourFamily:
        data.product.masterData.staged.masterVariant.attributesRaw[0].value.en,
      exactColour: data.product.masterData.staged.masterVariant.attributesRaw,
    });
    console.log(data);
  };

  const { data, isLoading, error } = useGetProducts(["product"], GET_PRODUCTS);
  if (isLoading) return <div>Loading ...</div>;
  if (error) return <div>Something went wrong ...</div>;

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to Alex&apos;s scuffed graphql demo
        </h1>

        <p className={styles.description}>Search for a product in CT:</p>

        <div>
          <input
            type="text"
            name="name"
            placeholder="yer product code"
            value={name}
            onChange={handleChange}
            required
          ></input>
        </div>

        <button className={styles.description} onClick={handleSearch}>
          <span>Search</span>
        </button>

        <div className={styles.grid}>
          Product name: {productData.productName}, <br /> Product description:{" "}
          {productData.productDescription}, <br />
          Product Sku: {productData.productSku}
          , <br />
          Availability: {JSON.stringify(productData.isOnStock)}, <br /> Colour
          Family: {JSON.stringify(productData.colourFamily)},
        </div>
        <span style={{ marginTop: "48px" }}>
          <iframe
            src="https://giphy.com/embed/sI9zGC4bh9eCI"
            width="480"
            height="267"
            frameBorder="0"
            allowFullScreen
          ></iframe>
          <p>
            <a href="https://giphy.com/gifs/troll-fabulous-flamingo-sI9zGC4bh9eCI"></a>
          </p>
        </span>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by ðŸ¦©{" "}
        </a>
      </footer>
    </div>
  );
};

export default Home;
